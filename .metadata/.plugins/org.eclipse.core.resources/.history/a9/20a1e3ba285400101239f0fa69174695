package com.christan.parser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URLEncoder;
import java.util.Scanner;

public class Parser {

	private String defaultFolderToReadAndWrite = "./child/";

	// assumptions: not testing other environments e.g. alpha.pingidentity.com
	// (otherwise I'd remove the domain name so the same test can work for all
	// environments)
	public String convertUrlToFileName(String urlToConvert)
			throws UnsupportedEncodingException {
		// credit to
		// http://stackoverflow.com/questions/1652483/convert-between-url-and-windows-filename-java
		return URLEncoder.encode(urlToConvert, "UTF-8");
	}

	public boolean isFileAlreadyExists(String fileName) {
		return isFileAlreadyExists(fileName, defaultFolderToReadAndWrite);
	}
	
	public boolean isFileAlreadyExists(String fileName, String folderName) { 
		File file = new File(folderName + fileName);
		return file.exists();
	}

	public boolean createFile(String fileName) {
		return false;
	}

	/*
	 * public void verifyNavigation() { // check to see if the navigation file
	 * already exists if (!isFileExist(navFileName)) { createFile(navFileName);
	 * //scrape the page then store it in navFileNamefail(
	 * "This is the first time that this test was run. Please ensure that the navigation is correct before using this file for future tests."
	 * ); } // if not, create a new one and store the results from this test run
	 * // then throw a failure // if so, check to see if the nav on this page
	 * matches
	 * 
	 * }
	 */
	public void writeToFile(String fileName, String fileContents)
			throws IOException {
		Writer out = new OutputStreamWriter(new FileOutputStream(
				defaultFolderToReadAndWrite + fileName));
		try {
			out.write(fileContents);
		} finally {
			out.close();
		}
	}

	public String getFileContents(String fileName) throws IOException {
		StringBuilder text;
		String endOfLine;
		Scanner scanner;
		// this is to prevent adding an extra '\n' at the end of the file/String
		boolean isFirstLine;

		// if the file does not exist
		if (!isFileAlreadyExists(defaultFolderToReadAndWrite + fileName)) {
			throw new IOException(
					"A specified file does not exist and therefore cannot be read from. File: '"
							+ fileName + "' Folder: '"
							+ defaultFolderToReadAndWrite + "'");
		}

		// initialize variables
		text = new StringBuilder();
		endOfLine = System.getProperty("line.separator");
		scanner = new Scanner(new FileInputStream(defaultFolderToReadAndWrite
				+ fileName));
		isFirstLine = true;

		// read the file
		try {
			while (scanner.hasNextLine()) {
				if (isFirstLine) {
					isFirstLine = false;
				} else {
					text.append(endOfLine);
				}
				text.append(scanner.nextLine());
			}
		} finally {
			scanner.close();
		}
		return text.toString();
	}
}
