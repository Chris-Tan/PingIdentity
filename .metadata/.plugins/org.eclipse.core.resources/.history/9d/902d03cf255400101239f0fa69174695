package com.christan.parser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URLEncoder;
import java.util.Scanner;


public class Parser {

	// assumptions: not testing other environments e.g. alpha.pingidentity.com
	// (otherwise I'd remove the domain name so the same test can work for all
	// environments)
	public String convertUrlToFileName(String urlToConvert)
			throws UnsupportedEncodingException {
		// credit to
		// http://stackoverflow.com/questions/1652483/convert-between-url-and-windows-filename-java
		return URLEncoder.encode(urlToConvert, "UTF-8");
	}
	
	public boolean isFileExist(String fileName) {
		File file = new File(fileName);
		return file.exists();
	}
	/*
	public boolean isFileExist(String fileName, String folderName) {
		File file = new File(fileName);
		return file.exists();
	}*/

	public boolean createFile(String fileName) {
		return false;
	}
	
/*
	public void verifyNavigation() {
		// check to see if the navigation file already exists
		if (!isFileExist(navFileName)) {
			createFile(navFileName);
			//scrape the page then store it in navFileName
			fail("This is the first time that this test was run. Please ensure that the navigation is correct before using this file for future tests.");
		}
		// if not, create a new one and store the results from this test run
		// then throw a failure
		// if so, check to see if the nav on this page matches

	}
	*/
	public void writeToFile(String fileName, String fileContents) throws IOException  {
		//log("Writing to file named " + fFileName + ". Encoding: " + fEncoding);
		Writer out = new OutputStreamWriter(new FileOutputStream(fileName));
		try {
			out.write(fileContents);
		}
		finally {
			out.close();
		}
	}

	
	public String getFileContents(String nameOfFile) throws IOException {
		/** Read the contents of the given file. */
		StringBuilder text = new StringBuilder();
		String endOfLine = System.getProperty("line.separator");
		Scanner scanner = new Scanner(new FileInputStream(nameOfFile));
		try {
			while (scanner.hasNextLine()){
				text.append(scanner.nextLine() + endOfLine);
			}
		}
		finally{
			scanner.close();
		}
		return text.toString();
	}
}
